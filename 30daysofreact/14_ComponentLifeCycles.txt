// 30 Days Of React:Component Life Cycles

// Component Life Cycles
// What is component life cycle
// Mounting
// Contructor
// getDerivedStateFromPros
// Render
// ComponentDidMount
// Updating
// getDerivedStateFromProps
// shouldComponentUpdate
// render
// componentDidUpdate
// Unmounting
// Exercises
// Exercises: Level 1
// Exercises: Level 2
// Exercises: Level 3

// Component Life Cycles

// What is component life cycle
// Component life cycle is the process of mounting, updating and destroying a component in a React application. You can associate a component life cycle with the process of human growth:birth, adult, elderly and death. In React component also a component can be mounted or rendered the first time, can be updated by changing the data and also can be destroyed whenever it is not needed. In React each component has three main phases:

// > Mounting
// > Updating
// > Unmounting

// Mounting
// Rendering or putting React component into the DOM is called mounting. The following built-in methods run in the given order during mounting of a React component.

// 1. constructor()
// 2. static getDerivedStateFromProps()
// 3. render()
// 4. componentDidMount()

// When we have been making a class-based component we used a built-in render method and it is required in all class-based components but other methods are optional.
// See the order of execution of the different methods by running the following snippet of codes.

// import React, { Component } from 'react';
// import ReactDOM from 'react-dom';

// class App extends Component {
//   constructor(props) {
//     super(props);
//     console.log('I am  the constructor and  I will be the first to run.');
//     this.state = {
//       firstName: '',
//     };
//   }

//   static getDerivedStateFromProps(props, state) {
//     console.log(
//       'I am getDerivedStateFromProps and I will be the second to run.'
//     );
//     return null;
//   }
//   componentDidMount() {
//     console.log('I am componentDidMount and I will be last to run.');
//   }

//   render() {
//     console.log('I am render and I will be the third to run.');
//     return (
//       <div className="App">
//         <h1>React Component Life Cycle</h1>
//       </div>
//     );
//   }
// }

// const rootElement = document.getElementById('root');
// ReactDOM.render(<App />, rootElement);

// Console :-
// I am the constructor and I will be the first to run.
// I am getDerivedStateFromProps and I will be the second to run.
// I am render and I will be the third to run.
// I am componentDidMount and I will be last to run.

// Constructor
// Nowadays we write class based-component without a constructor and we can write the state also outside the constructor. In older version React the state used be always inside the constructor.

// The constructor() method is executed before any other methods, when component is initiated and it is the place where to set the initial state and other values. In class we use constructor parameter to inherit from parents and in React to the constructor take a props parameter and the super method has to be also called. Look at the snippet of code about constructor and state.

import React, { Component } from 'react';
import ReactDOM from 'react-dom';

class App extends Component {
  constructor(props) {
    super(props);
    console.log('I am  the constructor and  I will be the first to run.');
    this.state = {
      firstName: '',
    };
  }
  render() {
    return (
      <div className="App">
        <h1>React Component Life Cycle</h1>
        <h2>The constructor is the first to Run</h2>
        <p>Author:{this.state.firstName}</p>
      </div>
    );
  }
}
