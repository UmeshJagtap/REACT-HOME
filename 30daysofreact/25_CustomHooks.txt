30 Days Of React: Custom Hooks

Custom Hooks
It is possible to make a custom hook on top of the available React hooks. For instance, 
when we fetch data we with use either fetch or axios to send an HTTP request and useEffect hooks to manage the React life cycle. 
Let's build useFetch custom hook on top of useEffect and useState.


// ---------------------------------------------- useFetch.js

// Create a file name useFetch.js, and import useState and useEffect. 
// Then transfer the state, useEffect and fetchData function part of the above code to the useFetch.js.

import React, { useState, useEffect } from 'react';

const useFetch = (url) => {
  // setting initial state and method to update state
  const [data, setData] = useState([]);

  const fetchData = async () => {
    // const url = 'https://restcountries.eu/rest/v2/all'
    // const url = 'https://jsonplaceholder.typicode.com/todos/1';
    // const url = 'https://fakestoreapi.com/products';

    try {
      const response = await fetch(url);
      const data = await response.json();
      setData(data);
      console.log(data);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  return [data];
};

export default useFetch;


// ---------------------------------------------- App.js

// Create Product Component to display products
// Receive ProductData from useFetch Component and pass/map it to Product Component

import React, { useState, useEffect } from 'react';
import useFetch from './useFetch';

const Product = ({ product }) => {
  // console.log(product);
  return (
    <>
      <h2>{product.title}</h2>
      <p key={product.id}>{product.category}</p>
      <img
        src={product.image}
        alt="product image"
        style={{ width: '100px', border: '1px solid red' }}
      />
      <p>{product.price}</p>
      <hr />
    </>
  );
};

const App = () => {
  
  const [data] = useFetch('https://fakestoreapi.com/products');

  // console.log(data);

  return (
    <div className="App">
      <h1>Fetching Data Using Hook</h1>
      <h1>Calling API</h1>
      <div>
        <p>There are {data.length} products in the store</p>
        {data.map((product) => (
          <Product product={product} key={product.id} />
        ))}
      </div>
    </div>
  );
};

export default App;
