// Cmds >>
// npx create-react-app airbnb
// cd airbnb
// nmp start

// Use {isShown && <p>Punchline: {props.punchline}</p>}
//      >>>>> to display or not

// Use {isShown ? 'Hide' : 'Show'}
//      >>>>> to select between the two

// REACT (-- useState --)
// const [isShown, setIsShown] = React.useState(false);
// function toggleShown() {
//   setIsShown((prevShown) => !prevShown);
//   console.log('isShown : ' + isShown);
// }

// REACT (-- Form --)
// const [formData, setFormData] = React.useState(
//     {firstName: "", lastName: ""}
// )
// function handleChange(event) {
//     setFormData(prevFormData => {
//         return {
//             ...prevFormData,
//            [event.target.name]: event.target.value,
//         }
//     })
//     console.log(event.target.value)
// }
// <form>
//     <input type="text" placeholder="First Name" onChange={handleChange} name="firstName" value={formData.firstName} // Sets the value of my form input to be whatever state is  i.e State ===> Input/>
//     <input type="text" placeholder="Last Name" onChange={handleChange} name="lastName" value={formData.lastName}/>
// </form>
// event > object
// onChange > event
// handleChange > eventListnerFunction

// 7:48:49 React forms intro

// https://www.youtube.com/watch?v=fq7k_gVV5x8

// 8:48:2 Memegenerator (Attach topText n bottomText to State)
// API
// fetch('https://swapi.dev/api/people/1')
// .then((res) => res.json())
// .then((data) => console.log(data));
// .then((data) => setstarWarsData(data));
// <pre>{JSON.stringify(starWarsData, null, 2)}</pre>

// 8:55:11 Side Effects
// What are React's primary tasks?
//     > Work with the DOM/browser to render UI to the package.
//     > Manage state for us between render cycles
//          (i.e. state values are "remembered" from one render to the next)
//     > Keep the UI updated whenever state changes occur

// What can't React handle on its own ?
// > (Out) side effects!
// - local Storage   ( We can access but not hand in interfacing )
// - API/database interactions  ( We can write code to interact with Api, but React is not incharge of that code )
// - Subscriptions (e.g. web sockets ~ChatApplications that updates live)
// - Syncing 2 different internal states together
// - Basically anything that React isn't in charge of

// REACT (-- useEffect --)
// React.useEffect(function () {
//   fetch('https://swapi.dev/api/people/1')
//     .then((res) => res.json())
//     //.then((data) => console.log(data));
//     .then((data) => setstarWarsData(data));
// }, []);

// 9:04:10
// API.js

// 9:12:01
// UseEffectCounter.js

// 9:22:15
// UseEffectGetNextCharacter.js

// 9:25:15
// MgMemeApi.js (Getting data from API)

// React.useEffect(() => {
//   fetch('https://api.imgflip.com/get_memes')
//     .then((res) => res.json())
//     // .then((data) => console.log(data.data.memes));
//     .then((data) => setAllMemes(data.data.memes)); // Sets state and triggers re-render
// }, []);

// const [data, setData] = useState(null);

// useEffect(() => {
//   fetch('https://api.example.com/data')
//     .then(response => response.json())
//     .then(data => setData(data))
//     .catch(error => console.error(error));
// }, []);

// 9:33:14
// WindowTracker.js

// React.useEffect(() => {
//     window.addEventListener('resize', function () {
//       console.log('Resized');
//       setWindowWidth(window.innerWidth);
//     });
//   }, []);

// 9:46:00 Building async func inside useEffect

/*
useEffect takes a function as its parameter. 
If that function returns something, it needs to be a cleanup function. Otherwise, it should return nothing. 
If we make it an async function, it automatically returns a promise instead of a function or nothing.
Therefore, if you want to use async operations inside of useEffect, you need to define the function seprately inside of the callback function, as seen below 
*/

// React.useEffect(() => {
//   async function getMeme() {
//     const res = await fetch('https://api.imgflip.com/get_memes');
//     const data = await res.json();
//     setAllMemes(data.data.memes);
//   }
//   getMeme();
// }, []);

/*
Recap :
- Event listners
- State
- Conditional rendering
- Forms
- Side effects
*/

// PRACTICE !! PRACTICE !! PRACTICE !!

// react - funfacts;
// work on toggle-button

// PROJECTS :
// 1. React Fun Facts ( Light / Dark ) Mode
// useState is used to manage state and cause re-renders,
// useRef is used to store mutable values without causing re-renders.
// 2. Markdown version of Apple Notes cloneElement
// 3. Tenzies (Dice Game)
